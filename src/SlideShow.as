/** -----------------------------------------------------------* Simple Slideshow v.1* -----------------------------------------------------------* Description: Calls an XML file that holds a Caption, Link, and Image URL* - ---------------------------------------------------------* Created by: chrisaiv@gmail.com* Modified by: * Date Modified: September 10, 2008* - ---------------------------------------------------------* Copyright ©2008 * - ---------------------------------------------------------***/package src {	import fl.controls.Label;	import flash.events.*;	import flash.net.URLRequest;	import flash.net.navigateToURL;	import flash.utils.Timer;	import flash.display.Sprite;	import flash.display.Sprite;	import flash.display.SimpleButton;	import flash.display.MovieClip;	import flash.display.LoaderInfo;		import com.senocular.utils.KeyObject;		public class SlideShow extends Sprite	{		private var key:KeyObject;		private var keysDown:Object;		private var xmlURL:String;		private var xmlLoader:XMLLoader;		private var currentImage:uint;		private var totalImages:Number;		private var timer:Timer;		private var imageHolder:ImageHolder;		private var isPlaying:Boolean = true;				public function SlideShow( )		{			//Local Testing 			xmlURL = "./xml/data.xml";			//Using SWFObject2 to pass an XML URL			//xmlURL = getFlashVars().xml;			loadXML( xmlURL );						//You might want to use this to Pause/Play the Auto Slideshow Portion			//pause_btn.addEventListener(MouseEvent.CLICK, pauseHandler);			prev_btn.addEventListener(MouseEvent.MOUSE_DOWN, prevHandler);			next_btn.addEventListener(MouseEvent.MOUSE_DOWN, nextHandler);			container_mc.addEventListener(MouseEvent.CLICK, goToItemDetailHandler);			container_mc.buttonMode = true;			this.key = new KeyObject( stage );						keysDown = new Object();			stage.addEventListener(KeyboardEvent.KEY_DOWN, keyPressed);			stage.addEventListener(KeyboardEvent.KEY_UP, keyReleased);		}				private function getFlashVars():Object		{		     return Object( LoaderInfo( this.loaderInfo ).parameters );		}						private function loadXML( xmlURL:String ):void		{			xmlLoader = new XMLLoader();			xmlLoader.addEventListener( Event.COMPLETE, onXMLLoaded );			xmlLoader.load( xmlURL );		}				private function initializeTimer( ):void		{			timer = new Timer(4500, 0);			timer.addEventListener(TimerEvent.TIMER, timerHandler);			startTimer();		}				private function startTimer( ):void		{			timer.start();		}				private function stopTimer( ):void		{			timer.stop();		}				private function onXMLLoaded( e:Event ):void		{			XMLLoader(e.currentTarget).removeEventListener( Event.COMPLETE, onXMLLoaded);			totalImages = XMLLoader(e.currentTarget).getImageData().length;			//Randomly Select the first image			currentImage = Math.floor( Math.random() * totalImages );						//Create a new Image Holder that will display the images			imageHolder = new ImageHolder( XMLLoader(e.currentTarget).getImageData(), container_mc, caption_txt, stage, currentImage);			//Start the Timer that will cycle through the images			initializeTimer();		}				private function keyPressed( e:KeyboardEvent ):void		{						if( key.isDown( key.RIGHT ) ) nextHandler( e );			else if( key.isDown( key.LEFT ) ) prevHandler( e );		}				private function keyReleased( e:KeyboardEvent ):void		{		}		private function timerHandler( e:TimerEvent ):void		{			if ( currentImage >= totalImages - Number(1) ) currentImage = 0;			else currentImage++			imageHolder.loadImage( currentImage );		}		private function prevHandler( e:* ):void		{			trace( "prevHandler: " + e.type );			stopTimer();			if( currentImage == 0 ) currentImage = totalImages - 1;			else currentImage--;						imageHolder.loadImage( currentImage );		}				private function nextHandler( e:* ):void		{			trace( "nextHandler: " + e.type );			stopTimer();			if( currentImage == totalImages - 1 ) currentImage = 0;			else currentImage++;						imageHolder.loadImage( currentImage );		}				private function pauseHandler( e:MouseEvent ):void		{			if (isPlaying) {				isPlaying = false;								stopTimer();				//pause_btn.alpha = 0.8;			} else {				isPlaying = true;				startTimer();				//pause_btn.alpha = 1;			}		}		private function goToItemDetailHandler( e:MouseEvent ):void		{			navigateToURL( new URLRequest( xmlLoader.getImageData()[currentImage].uri ), "_self" );		}			}}