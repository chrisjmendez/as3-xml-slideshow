/** -----------------------------------------------------------* Simple Slideshow v.1.1* -----------------------------------------------------------* Description: Calls an XML file that holds a Caption, Link, and Image URL* - ---------------------------------------------------------* Created by: chrisaiv@gmail.com* Modified by: chrisaiv* Date Modified: December 05, 2008* - ---------------------------------------------------------* Copyright ©2008 * - ---------------------------------------------------------***/package src {	import com.senocular.utils.*;		import flash.display.LoaderInfo;	import flash.display.MovieClip;	import flash.display.SimpleButton;	import flash.display.Sprite;	import flash.display.Stage;	import flash.events.*;	import flash.net.URLRequest;	import flash.net.navigateToURL;	import flash.utils.Timer;		public class SlideShow extends Sprite	{		private var key:KeyObject;		private var keysDown:Object;		private var xmlURL:String;		private var xmlLoader:XMLLoader;		private var currentImage:uint;		private var totalImages:Number;		private var timer:Timer;		private var imageHolder:ImageHolder;		private var isPlaying:Boolean = true;				private var containerMc:MovieClip;		private var nextBtn:SimpleButton;		private var prevBtn:SimpleButton;		private var pauseBtn:SimpleButton;		private var captionLbL:Label;		private var appStage:Stage;				public function SlideShow( )		{			//Determine whether to use Local Data or SWFObject2 Data			xmlURL = ( isLocalTesting() ) ? "./xml/data.xml" : xmlURL = getFlashVars().xml;			//Load the XML			loadXML( xmlURL );						//You might want to use this to Pause/Play the Auto Slideshow Portion			//pauseBtn = pause_btn;			//pause_btn.addEventListener( MouseEvent.CLICK, pauseHandler );			prevBtn = prev_btn;			prev_btn.addEventListener( MouseEvent.MOUSE_DOWN, prevHandler );						nextBtn = next_btn;			next_btn.addEventListener( MouseEvent.MOUSE_DOWN, nextHandler );						containerMc = container_mc;			containerMc.buttonMode = true;			containerMc.addEventListener( MouseEvent.CLICK, goToItemDetailHandler );						captionLbL = caption_cmpt;			appStage = stage;			key = new KeyObject( appStage );						keysDown = new Object( );			appStage.addEventListener( KeyboardEvent.KEY_DOWN, keyPressed );			appStage.addEventListener( KeyboardEvent.KEY_UP, keyReleased );		}				/*************************************************************		 * Helpers		*************************************************************/		private function getFlashVars():Object		{		     return Object( LoaderInfo( this.loaderInfo ).parameters );		}				private function isLocalTesting():Boolean		{			var dev:Boolean = new RegExp("file://").test( this.loaderInfo.loaderURL );			return dev;		}						private function loadXML( xmlURL:String ):void		{			xmlLoader = new XMLLoader( );			xmlLoader.addEventListener( Event.COMPLETE, xmlCompleteHandler );			xmlLoader.load( xmlURL );		}				/*************************************************************		 * Timer / Countdown 		*************************************************************/		private function initializeTimer( ):void		{			timer = new Timer( 4500, 0 );			timer.addEventListener( TimerEvent.TIMER, timerHandler );			startTimer( );		}				private function startTimer( ):void		{			timer.start( );		}				private function stopTimer( ):void		{			timer.stop( );		}				/*************************************************************		 * Event Handlers		*************************************************************/		//XMl Handler		private function xmlCompleteHandler( e:Event ):void		{			var originalLoader:XMLLoader = XMLLoader(e.currentTarget); 						originalLoader.removeEventListener( Event.COMPLETE, xmlCompleteHandler );						totalImages = originalLoader.getImageData().length;			//Randomly Select the first image			currentImage = Math.floor( Math.random() * totalImages );						//Create a new Image Holder that will display the images			initializeImageHolder( originalLoader.getImageData(), currentImage );			//Start the Timer that will cycle through the images			initializeTimer( );		}				private function initializeImageHolder( data:Array, currentImg:uint ):void		{			imageHolder = new ImageHolder( data, appStage, containerMc, captionLbL, currentImg, isLocalTesting() );					}				//Keyboard Handler		private function keyPressed( e:KeyboardEvent ):void		{						if( key.isDown( key.RIGHT ) ) nextHandler( e );			else if( key.isDown( key.LEFT ) ) prevHandler( e );		}				private function keyReleased( e:KeyboardEvent ):void		{		}		//Timer Handler		private function timerHandler( e:TimerEvent ):void		{			if ( currentImage >= totalImages - Number(1) ) currentImage = 0;			else currentImage++			imageHolder.loadImage( currentImage );		}		//Button Handler		private function prevHandler( e:* ):void		{			trace( "prevHandler: " + e.type );			stopTimer( );			if( currentImage == 0 ) currentImage = totalImages - 1;			else currentImage--;						imageHolder.loadImage( currentImage );		}				private function nextHandler( e:* ):void		{			trace( "nextHandler: " + e.type );			stopTimer( );			if( currentImage == totalImages - 1 ) currentImage = 0;			else currentImage++;						imageHolder.loadImage( currentImage );		}				private function pauseHandler( e:MouseEvent ):void		{			if (isPlaying) {				isPlaying = false;								stopTimer( );				//pauseBtn.alpha = 0.8;			} else {				isPlaying = true;				startTimer( );				//pauseBtn.alpha = 1;			}		}				//Canvas Handler		private function goToItemDetailHandler( e:MouseEvent ):void		{			navigateToURL( new URLRequest( xmlLoader.getImageData()[currentImage].uri ), "_self" );		}			}}